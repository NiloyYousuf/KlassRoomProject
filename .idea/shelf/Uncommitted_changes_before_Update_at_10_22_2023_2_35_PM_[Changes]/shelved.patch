Index: src/main/java/com/example/dev2/StudentRegistrationController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.dev2;\r\n\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.Alert.AlertType;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.PasswordField;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.sql.*;\r\n\r\npublic class StudentRegistrationController {\r\n\r\n    @FXML\r\n    private TextField usernameField;\r\n\r\n    @FXML\r\n    private TextField emailField;\r\n\r\n    @FXML\r\n    private PasswordField passwordField;\r\n\r\n    @FXML\r\n    private PasswordField confirmPasswordField;\r\n\r\n    @FXML\r\n    private Button signUpButton;\r\n\r\n    public void handleSignUp(ActionEvent event) {\r\n        String username = usernameField.getText();\r\n        String email = emailField.getText();\r\n        String password = passwordField.getText();\r\n        String confirmPassword = confirmPasswordField.getText();\r\n\r\n        // Check email validity\r\n        if (!isValidEmail(email)) {\r\n            showAlert(\"Incorrect email format\", \"Please enter a valid email (e.g., abc@gmail.com).\");\r\n            return;\r\n        }\r\n\r\n        // Check password length\r\n        if (password.length() < 8) {\r\n            showAlert(\"Password length error\", \"Password must be at least 8 characters long.\");\r\n            return;\r\n        }\r\n\r\n        // Check if passwords match\r\n        if (!password.equals(confirmPassword)) {\r\n            showAlert(\"Password mismatch\", \"Password and confirm password do not match.\");\r\n            return;\r\n        }\r\n        if (emailExists(email)) {\r\n            showAlert(\"Email already in use\", \"This email has already been used.\");\r\n            return;\r\n        }\r\n        // Add database insertion logic\r\n        if (insertDataToDatabase(username, email, password)) {\r\n            showAlert(\"Success\", \"Registration successful!\");\r\n        } else {\r\n            showAlert(\"Database Error\", \"Failed to insert data into the database.\");\r\n        }\r\n\r\n        // Clear input fields\r\n        usernameField.clear();\r\n        emailField.clear();\r\n        passwordField.clear();\r\n        confirmPasswordField.clear();\r\n    }\r\n\r\n    public void handleBackToRegistration(ActionEvent event) {\r\n        // Handle the \"Back to Registration\" button action here\r\n        Stage stage = (Stage) signUpButton.getScene().getWindow();\r\n        stage.close();\r\n\r\n        // Start the RegisterMain window\r\n        RegisterMain registerMain = new RegisterMain();\r\n        try {\r\n            registerMain.start(new Stage());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    private boolean isValidEmail(String email) {\r\n        // Simple email validation: Check for @gmail.com at the end\r\n        return email.matches(\".+@gmail\\\\.com$\") && !email.contains(\" \");\r\n    }\r\n    private boolean emailExists(String email) {\r\n        try {\r\n            Connection connection = getConnection();\r\n            String query = \"SELECT COUNT(*) FROM students WHERE student_email = ?\";\r\n            PreparedStatement preparedStatement = connection.prepareStatement(query);\r\n            preparedStatement.setString(1, email);\r\n            ResultSet resultSet = preparedStatement.executeQuery();\r\n            resultSet.next();\r\n            int count = resultSet.getInt(1);\r\n            connection.close();\r\n            return count > 0;\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n    private void showAlert(String title, String message) {\r\n        Alert alert = new Alert(AlertType.INFORMATION);\r\n        alert.setTitle(title);\r\n        alert.setHeaderText(null);\r\n        alert.setContentText(message);\r\n        alert.showAndWait();\r\n    }\r\n\r\n    private boolean insertDataToDatabase(String username, String email, String password) {\r\n        try {\r\n            Connection connection = getConnection();\r\n            String insertQuery = \"INSERT INTO students (student_username, student_email, student_password) VALUES (?, ?, ?)\";\r\n            PreparedStatement preparedStatement = connection.prepareStatement(insertQuery);\r\n            preparedStatement.setString(1, username);\r\n            preparedStatement.setString(2, email);\r\n            preparedStatement.setString(3, password);\r\n            int rowsAffected = preparedStatement.executeUpdate();\r\n            connection.close();\r\n            return rowsAffected > 0;\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private Connection getConnection() throws SQLException {\r\n        String url = \"jdbc:mysql://localhost:3306/Project\";\r\n        String username = \"root\";\r\n        String password = \"200041116\";\r\n        return DriverManager.getConnection(url, username, password);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/dev2/StudentRegistrationController.java b/src/main/java/com/example/dev2/StudentRegistrationController.java
--- a/src/main/java/com/example/dev2/StudentRegistrationController.java	(revision 9766a09e4f8ce8f92e56ae12d3b57222b0393bc5)
+++ b/src/main/java/com/example/dev2/StudentRegistrationController.java	(date 1697922987416)
@@ -132,7 +132,7 @@
     private Connection getConnection() throws SQLException {
         String url = "jdbc:mysql://localhost:3306/Project";
         String username = "root";
-        String password = "200041116";
+        String password = "200041123";
         return DriverManager.getConnection(url, username, password);
     }
 }
Index: src/main/java/com/example/dev2/TeacherRegistrationController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.dev2;\r\n\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.Alert.AlertType;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.PasswordField;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\n\r\npublic class TeacherRegistrationController {\r\n\r\n    @FXML\r\n    private TextField usernameField;\r\n\r\n    @FXML\r\n    private TextField emailField;\r\n\r\n    @FXML\r\n    private PasswordField passwordField;\r\n\r\n    @FXML\r\n    private PasswordField confirmPasswordField;\r\n\r\n    @FXML\r\n    private Button signUpButton;\r\n\r\n    public void handleSignUp(ActionEvent event) {\r\n        String username = usernameField.getText();\r\n        String email = emailField.getText();\r\n        String password = passwordField.getText();\r\n        String confirmPassword = confirmPasswordField.getText();\r\n\r\n        // Check email validity\r\n        if (!isValidEmail(email)) {\r\n            showAlert(\"Incorrect email format\", \"Please enter a valid email (e.g., abc@gmail.com).\");\r\n            return;\r\n        }\r\n\r\n        // Check password length\r\n        if (password.length() < 8) {\r\n            showAlert(\"Password length error\", \"Password must be at least 8 characters long.\");\r\n            return;\r\n        }\r\n\r\n        // Check if passwords match\r\n        if (!password.equals(confirmPassword)) {\r\n            showAlert(\"Password mismatch\", \"Password and confirm password do not match.\");\r\n            return;\r\n        }\r\n        if (emailExists(email)) {\r\n            showAlert(\"Email already in use\", \"This email has already been used.\");\r\n            return;\r\n        }\r\n        // Add database insertion logic for teachers\r\n        if (insertDataToDatabase(username, email, password)) {\r\n            showAlert(\"Success\", \"Registration successful!\");\r\n        } else {\r\n            showAlert(\"Database Error\", \"Failed to insert data into the database.\");\r\n        }\r\n\r\n        // Clear input fields\r\n        usernameField.clear();\r\n        emailField.clear();\r\n        passwordField.clear();\r\n        confirmPasswordField.clear();\r\n    }\r\n\r\n    public void handleBackToRegistration(ActionEvent event) {\r\n        // Handle the \"Back to Registration\" button action here\r\n        Stage stage = (Stage) signUpButton.getScene().getWindow();\r\n        stage.close();\r\n\r\n        // Start the RegisterMain window\r\n        RegisterMain registerMain = new RegisterMain();\r\n        try {\r\n            registerMain.start(new Stage());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private boolean isValidEmail(String email) {\r\n        // Simple email validation: Check for @gmail.com at the end\r\n        return email.matches(\".+@gmail\\\\.com$\") && !email.contains(\" \");\r\n    }\r\n\r\n    private boolean emailExists(String email) {\r\n        try {\r\n            Connection connection = getConnection();\r\n            String query = \"SELECT COUNT(*) FROM teachers WHERE email = ?\";\r\n            PreparedStatement preparedStatement = connection.prepareStatement(query);\r\n            preparedStatement.setString(1, email);\r\n            ResultSet resultSet = preparedStatement.executeQuery();\r\n            resultSet.next();\r\n            int count = resultSet.getInt(1);\r\n            connection.close();\r\n            return count > 0;\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private void showAlert(String title, String message) {\r\n        Alert alert = new Alert(AlertType.INFORMATION);\r\n        alert.setTitle(title);\r\n        alert.setHeaderText(null);\r\n        alert.setContentText(message);\r\n        alert.showAndWait();\r\n    }\r\n\r\n    private boolean insertDataToDatabase(String username, String email, String password) {\r\n        try {\r\n            Connection connection = getConnection();\r\n            String insertQuery = \"INSERT INTO teachers (teacher_username, teacher_email, teacher_password) VALUES (?, ?, ?)\";\r\n            PreparedStatement preparedStatement = connection.prepareStatement(insertQuery);\r\n            preparedStatement.setString(1, username);\r\n            preparedStatement.setString(2, email);\r\n            preparedStatement.setString(3, password);\r\n            int rowsAffected = preparedStatement.executeUpdate();\r\n            connection.close();\r\n            return rowsAffected > 0;\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private Connection getConnection() throws SQLException {\r\n        String url = \"jdbc:mysql://localhost:3306/Project\";\r\n        String username = \"root\";\r\n        String password = \"200041116\";\r\n        return DriverManager.getConnection(url, username, password);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/dev2/TeacherRegistrationController.java b/src/main/java/com/example/dev2/TeacherRegistrationController.java
--- a/src/main/java/com/example/dev2/TeacherRegistrationController.java	(revision 9766a09e4f8ce8f92e56ae12d3b57222b0393bc5)
+++ b/src/main/java/com/example/dev2/TeacherRegistrationController.java	(date 1697923142587)
@@ -137,7 +137,7 @@
     private Connection getConnection() throws SQLException {
         String url = "jdbc:mysql://localhost:3306/Project";
         String username = "root";
-        String password = "200041116";
+        String password = "200041123";
         return DriverManager.getConnection(url, username, password);
     }
 }
